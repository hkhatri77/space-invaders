(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

;
(function () {

    var Game = function Game() {

        var canvas = document.getElementById('space-invaders');

        var screen = canvas.getContext('2d');
        var gameSize = {
            x: canvas.width,
            y: canvas.height
        };

        this.bodies = [];
        this.bodies = this.bodies.concat(createInvaders(this));
        this.bodies = this.bodies.concat(new Player(this, gameSize));
        this.shootSound = document.getElementById('shoot-sound');

        var self = this;

        var tick = function tick() {
            self.update();
            self.draw(screen, gameSize);
            requestAnimationFrame(tick);
        };

        tick();
    };

    Game.prototype = {

        update: function update() {
            var self = this;

            var notCollidingWithAnything = function notCollidingWithAnything(b1) {
                return self.bodies.filter(function (b2) {
                    return colliding(b1, b2);
                }).length === 0;
            };

            this.bodies = this.bodies.filter(notCollidingWithAnything);

            for (var i = 0; i < this.bodies.length; i++) {
                this.bodies[i].update();
            }
        },

        draw: function draw(screen, gameSize) {
            screen.clearRect(0, 0, gameSize.x, gameSize.y);

            for (var i = 0; i < this.bodies.length; i++) {
                drawRect(screen, this.bodies[i]);
            }
        },

        invadersBelow: function invadersBelow(invader) {

            return this.bodies.filter(function (b) {

                return b instanceof Invader && Math.abs(invader.center.x - b.center.x) < b.size.x && b.center.y > invader.center.y;
            }).length > 0;
        },

        addBody: function addBody(body) {
            this.bodies.push(body);
        }
    };

    var Invader = function Invader(game, center) {
        this.game = game;
        this.center = center;
        this.size = {
            x: 15,
            y: 15
        };

        this.patrolX = 0;

        this.speedX = 0.3;
    };

    Invader.prototype = {

        update: function update() {

            if (this.patrolX < 0 || this.patrolX > 30) {

                this.speedX = -this.speedX;
            }

            if (Math.random() > 0.995 && !this.game.invadersBelow(this)) {

                var bullet = new Bullet({
                    x: this.center.x,
                    y: this.center.y + this.size.y / 2
                }, {
                    x: Math.random() - 0.5,
                    y: 2
                });

                this.game.addBody(bullet);
            }

            this.center.x += this.speedX;

            this.patrolX += this.speedX;
        }
    };

    var createInvaders = function createInvaders(game) {
        var invaders = [];
        for (var i = 0; i < 24; i++) {

            var x = 30 + i % 8 * 30;

            var y = 30 + i % 3 * 30;

            invaders.push(new Invader(game, {
                x: x,
                y: y
            }));
        }

        return invaders;
    };

    var Player = function Player(game, gameSize) {
        this.game = game;
        this.size = {
            x: 15,
            y: 15
        };
        this.center = {
            x: gameSize.x / 2,
            y: gameSize.y - this.size.y * 2
        };

        this.keyboarder = new Keyboarder();
    };

    Player.prototype = {

        update: function update() {
            if (this.keyboarder.isDown(this.keyboarder.KEYS.LEFT)) {

                this.center.x -= 2;
            } else if (this.keyboarder.isDown(this.keyboarder.KEYS.RIGHT)) {
                this.center.x += 2;
            }

            if (this.keyboarder.isDown(this.keyboarder.KEYS.S)) {
                var bullet = new Bullet({
                    x: this.center.x,
                    y: this.center.y - this.size.y - 10
                }, {
                    x: 0,
                    y: -7
                });

                this.game.addBody(bullet);
                this.game.shootSound.load();
                this.game.shootSound.play();
            }
        }
    };

    var Bullet = function Bullet(center, velocity) {
        this.center = center;
        this.size = {
            x: 3,
            y: 3
        };
        this.velocity = velocity;
    };

    Bullet.prototype = {

        update: function update() {

            this.center.x += this.velocity.x;
            this.center.y += this.velocity.y;
        }
    };

    var Keyboarder = function Keyboarder() {

        var keyState = {};

        window.addEventListener('keydown', function (e) {
            keyState[e.keyCode] = true;
        });

        window.addEventListener('keyup', function (e) {
            keyState[e.keyCode] = false;
        });

        this.isDown = function (keyCode) {
            return keyState[keyCode] === true;
        };

        this.KEYS = {
            LEFT: 37,
            RIGHT: 39,
            S: 83
        };
    };
    var drawRect = function drawRect(screen, body) {
        screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);
    };

    var colliding = function colliding(b1, b2) {
        return !(b1 === b2 || b1.center.x + b1.size.x / 2 < b2.center.x - b2.size.x / 2 || b1.center.y + b1.size.y / 2 < b2.center.y - b2.size.y / 2 || b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 || b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2);
    };

    window.addEventListener('load', function () {
        new Game();
    });
})();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
